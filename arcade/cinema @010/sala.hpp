#pragma once
#include <iostream>
#include <vector>
#include <sstream>
#include <memory>
#include "client.hpp"


class Sala {
private:
    std::vector<std::shared_ptr<Client>> sala{};
    
public:
    ///////////////////////////////////////////////////////////////////////////
    //////////////Constructor//////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////

    Sala() {
    }

    ///////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////



    ///////////////////////////////////////////////////////////////////////////
    //////////////Print Methods////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////

    friend std::ostream& operator<<(std::ostream& os, const Sala& sala) {
        os << "[ ";
        for (auto i : sala.sala) {
            if (i == nullptr) {
                os << "---- ";
            } else {
                os << i << ' ';
            }
        }
        os << "]";
        return os;
    }

    void show() const {
        std::cout << "[ ";
        for (auto i : this->sala) {
            std::cout << *i;
        }
        std::cout << "]\n";
    }
};